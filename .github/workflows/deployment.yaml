---
name: Deployment
on:
  push:
    branches:
      - master
  workflow_dispatch:
jobs:
  deployment:
    name: Deployment
    runs-on: ubuntu-latest
    env:
      PROJECT: movies
      SPACE_NAME: movies.cdn.samarchyan.me
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 15.x
          registry-url: https://registry.npmjs.org

      - name: Use npm cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm

      - name: Install yarn
        run: sudo npm install yarn -g

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use yarn cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Use pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip

      - name: Use tox cache
        uses: actions/cache@v3
        with:
          path: .tox
          key: tox-${{ hashFiles('requirements.txt', 'requirements-dev.txt', 'requirements-additional.txt') }}

      # Need to use this because yarn cache is not working properly
      - name: Use node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            node_modules-

      - name: Install shfmt
        run: make install-shfmt

      - name: Install hadolint
        run: make install-hadolint

      - name: Install shellcheck
        run: sudo apt install shellcheck -y

      - name: Install js dependencies
        run: make yarn-install-locked

      - name: Install tox
        run: pip install tox

      - name: Install python requirements
        run: tox -e py-requirements

      - name: Run tests
        run: make test

      - name: Run codecov
        uses: codecov/codecov-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run yarn build
        run: make yarn-build

      - name: Collect static files
        run: |
          source .tox/py/bin/activate
          src/manage.py collectstatic --no-input
        env:
          SECRET_KEY: key
          COLLECT_STATIC: True
          DJANGO_SETTINGS_MODULE: movies.settings

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.SPACES_ACCESS_KEY}}
          secret_key: ${{ secrets.SPACES_SECRET_KEY }}
          space_name: ${{ env.SPACE_NAME }}
          space_region: nyc3
          source: static

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Flush CDN cache
        run: |
          CDN_ID="$(doctl compute cdn list | grep $SPACE_NAME | awk '{print $1}')"
          doctl compute cdn flush $CDN_ID

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.1

      - name: Configure kubectl
        run: |
          mkdir ~/.kube
          echo $KUBECONFIG > ~/.kube/config
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}  # Done as a variable because it doesn't work in place.

      - name: Deploy
        run: |
          kubectl apply -f deployment/configmap.yaml
          kubectl create secret generic "$PROJECT" --from-literal=DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            --from-literal=SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --from-literal=SOCIAL_AUTH_VK_APP_KEY=${{ secrets.SOCIAL_AUTH_VK_APP_KEY }} \
            --from-literal=SOCIAL_AUTH_VK_APP_SECRET=${{ secrets.SOCIAL_AUTH_VK_APP_SECRET }} \
            --from-literal=SOCIAL_AUTH_VK_OAUTH2_KEY=${{ secrets.SOCIAL_AUTH_VK_OAUTH2_KEY }} \
            --from-literal=SOCIAL_AUTH_VK_OAUTH2_SECRET=${{ secrets.SOCIAL_AUTH_VK_OAUTH2_SECRET }} \
            --from-literal=SOCIAL_AUTH_FACEBOOK_KEY=${{ secrets.SOCIAL_AUTH_FACEBOOK_KEY }} \
            --from-literal=SOCIAL_AUTH_FACEBOOK_SECRET=${{ secrets.SOCIAL_AUTH_FACEBOOK_SECRET }} \
            --from-literal=TMDB_KEY=${{ secrets.TMDB_KEY }} \
            --from-literal=OMDB_KEY=${{ secrets.OMDB_KEY }} \
            --from-literal=SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
            --from-literal=EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f deployment/deployment.yaml
          kubectl apply -f deployment/ingress.yaml
          kubectl apply -f deployment/service.yaml
          kubectl rollout restart "deployment/$PROJECT"
          kubectl rollout status "deployment/$PROJECT"

      - name: Run db migration
        run: make prod-manage migrate
